// Set common text properties.
@mixin text_style($font-size: null, $text-align: null, $color: null, $line-height: null, $font-weight: null) {
    font-size: $font-size;
    font-weight: $font-weight;
    text-align: $text-align;
    color: $color;
    line-height: $line-height;
}

// Set common flex properties.
@mixin flex_style($flex-direction: null, $flex-wrap: null, $flex-grow: null, $align-items: null, $justify-content: null) {
    display: flex;
    flex-direction: $flex-direction;
    flex-wrap: $flex-wrap;
    flex-grow: $flex-grow;
    align-items: $align-items;
    justify-content: $justify-content;
}

// Set common button properties.
@mixin button_style($color: null, $background-color: null, $hover-color: null) {
    color: $color;
    background-color: $background-color;
    border-color: $background-color;

    &:hover {
        background-color: $hover-color;
        border-color: $hover-color;
    }
}

// Create navigation bar item classes using map and set icon and background colors.
@mixin setup_navigation_bar($services) {
    @each $service in $services {
        .#{$service} {

            .navigation-bar-item-icon { color: map-get($service-colors-map, $service); }

            .navigation_bar-item-menu { background-color: map-get($service-menu-colors-map, $service); }

            &:hover {

                background-color: map-get($service-colors-map, $service);

                .navigation-bar-item-icon { color: $white; }

                > a:before {
                    content: "";
                    @include navigation_item_arrow(map-get($service-colors-map, $service)) // Add arrow below nav item.
                }
            }
        }
    }
}

@mixin navigation_item_arrow($color) {
    position: absolute;
    height: 0;
    width: 0;
    left: 50%;
    bottom: -35px;
    border-style: solid;
    border-width: 35px 83.5px 0;
    border-color: $color transparent transparent;
    transform: translateX(-50%);
    z-index: 90;
}

// Loop through array setting colors for service items.
@mixin set_service_colors($colors) {
    @for $i from 1 through length($colors) {
        .services_grid-item-wrapper:nth-child(#{$i}) {
            .service-item-icon, .services-item-button { background-color: nth($colors, $i); border-color: nth($colors, $i); }
            .services_grid-item:hover { 
                transition: .5s ease; background-color: nth($colors, $i); 
                .service-item-icon, .services-item-button { color: nth($colors, $i); background-color: $white; border-color: $white;}
                h2, p { color: $white; }
            }
        }
    }
}

// Simplify min-width media queries.
@mixin mq_min($break) {
    @if $break == "x-small" {
        @media #{$brkpoint-min-xs} {
            @content;
        }
    }

    @else if $break == "small" {
        @media #{$brkpoint-min-sm} {
            @content;
        }
    }

    @else if $break == "medium" {
        @media #{$brkpoint-min-md} {
            @content;
        }
    }

    @else if $break == "large" {
        @media #{$brkpoint-min-lg} {
            @content;
        }
    }
}

// Simplify max-width media queries.
@mixin mq_max($break) {
    @if $break == "x-small" {
        @media #{$brkpoint-max-xs} {
            @content;
        }
    }

    @else if $break == "small" {
        @media #{$brkpoint-max-sm} {
            @content;
        }
    }

    @else if $break == "medium" {
        @media #{$brkpoint-max-md} {
            @content;
        }
    }

    @else if $break == "large" {
        @media #{$brkpoint-max-lg} {
            @content;
        }
    }
}
